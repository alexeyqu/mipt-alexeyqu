ДЗ 5 -- модели памяти

Куликов Алексей, гр. 397

Задача 3. Double-checked locking - 4 балла
[double-checked-locking]

std::atomic<Singleton*> pInstance = nullptr;
std::mutex mutex;

Singleton* getInstance() {
    Singleton* p = pInstance.load();
    if (p == nullptr) {
        std::lock_guard<std::mutex> lock(mutex);
        p = pInstance.load();
            if (p == nullptr) {
                p = new Singleton;
            pInstance.store(p);
            }
    }
    return p;
}

Какие минимальные упорядочивания памяти нужно расставить во всех атомарных операциях
над pInstance, чтобы гарантировать корректность работы приведенного сниппета кода?

Решение:

Рассмотрим 2 потока, исполняющих этот кусок кода.

Нам надо, чтобы singleton создался в единственном экземпляре.
БОО, пусть поток T1 его создал (т.е. первым выполнил pInstance.store(p);).

По модели памяти, все операции, которые он выполняет внутри себя, подчинены program order (PO) ==> happens-before (HB).

Поскольку T1 в итоге создал pInstance, то T1 захватил мьютекс до T2 (по PO).

Рассмотрим второй поток T2.
Внутри него тоже есть PO, но нам надо обеспечить отношение syncronized-with (SW)
для ячейки памяти с pInstance и этих 2 потоков, чтобы гарантировать, что записанный (созданный T1) pInstance будет увиден T2.

SW ==> HB над операциями из разных потоков.

Далее, по транзитивности HB мы получим корректный HB для всех операций с pInstance.

Стоит сделать вот так:

Singleton* getInstance() {
(1) Singleton* p = pInstance.load(std::memory_order_acquire);
    if (p == nullptr) {
        std::lock_guard<std::mutex> lock(mutex);
(2)     p = pInstance.load(std::memory_order_relaxed);
            if (p == nullptr) {
                p = new Singleton;
(3)         pInstance.store(p, std::memory_order_release);
            }
    }
    return p;
}

Т.о., из 3 обращений к разделяемой памяти (1) и (3) оказываются под отношением HB.
При этом, поскольку (2) находится под мьютексом (т.е. память в (2) заведомо будет в актуальном состоянии),
то в (2) мы можем поставить минимальные ограничения на непосредственный доступ к памяти.

Можно ли лучше (т.е. слабее)? Да.

Singleton* getInstance() {
    Singleton* p = pInstance.load(std::memory_order_consume);
    if (p == nullptr) {
        std::lock_guard<std::mutex> lock(mutex);
        p = pInstance.load(std::memory_order_consume);
            if (p == nullptr) {
                p = new Singleton;
            pInstance.store(p, std::memory_order_release);
            }
    }
    return p;
}

Мы знаем, что consume-семантика отличается от acquire тем, что она гарантирует
видимость операций с памятью между потоками, но в случае наличия цепочек зависимостей данных (data dependency chain).

В этом примере переменная p проходит через все важные load-store операции с разделяемой памятью,
так что более слабое ограничение consume не поломает ничего (а быстрее может быть, о да).

Слабее будет только полный relaxed, а мы такого не можем допустить, поскольку сломается SW-отношение между потоками.

Для N потоков ситуация не изменится, т.к. всё равно будет какой-то первый, кто создаст singleton, а остальные отвалятся аналогично T2.
