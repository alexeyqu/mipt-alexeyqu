ДЗ 1 -- Алгоритмы взаимного исключения

Куликов Алексей, гр. 397

4) Tricky Mutex [tricky] - Бонусная

Рассмотрим следующую реализацию мьютекса:

class tricky_mutex {
public:
   tricky_mutex() : thread_count(0)
   {}

   void lock() {
       while (thread_count.fetch_add(1) > 0) {
           thread_count.fetch_sub(1);
       }
   }

   void unlock() {
       thread_count.fetch_sub(1);
   }

private:
   std::atomic<int> thread_count;
};

Гарантирует ли он взаимное исключение и свободу от взаимной блокировки?

Ответ:

Взаимное исключение
Дедлок возможен.

Решение:

Взаимное исключение гарантируется, докажем это по стандартной схеме.

Для каждого из потоков А и В есть 2 пути (в скобках -- атомарные операции):
1) (read_A(thread_count == 0) -->  write_A(thread_count = 1)) --> CS_A
2) (read_A(thread_count != 0) -->  write_A(thread_count += 1)) --> (read_A(thread_count) -->  write_A(thread_count -= 1)) --> repeat

Пойдём от противного: пусть есть последовательность команд, после которых оба потока оказываются в своих CS.

БОО, первым туда попал А. После этого thread_count = 1, потоку B надо его декрементировать, чтобы пойти по 1 пути (в CS_B).

Но единственная операция декремента есть на 2м пути, т.е. fetch_add_A(thread_count) произошло ровно перед fetch_sub_B(thread_count).

Но тогда непосредственно перед fetch_add_A(thread_count) было fetch_add_B(thread_count), т.е. read_A(thread_count == 0) не могло случиться.

Противоречие.

Значит, взаимное исключение обеспечивается.

Пример дедлока (точнее, livelock'a):

Пусть у нас есть 3 потока: A, B, C.

A: call lock()                            // thread_count = 0
A: thread_count.fetch_add(1)              // thread_count = 1
A: goes into CS_A
B: call lock()
B: thread_count.fetch_add(1)              // thread_count = 2
A: leaves CS_A
A: unlock()
A: thread_count.fetch_sub(1)              // thread_count = 1
A: terminates

// here goes the livelock state

C: call lock()
C: thread_count.fetch_add(1)              // thread_count = 2

B: thread_count.fetch_sub(1)              // thread_count = 1
B: thread_count.fetch_add(1)              // thread_count = 2

C: thread_count.fetch_sub(1)              // thread_count = 1
C: thread_count.fetch_add(1)              // thread_count = 2

B: thread_count.fetch_sub(1)              // thread_count = 1
B: thread_count.fetch_add(1)              // thread_count = 2

etc.

Вот.
